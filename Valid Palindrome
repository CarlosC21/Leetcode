# PYTHON
# Convert letters to lowercase and remove non-alphanumeric chars = letters and numbers
# Given a string (s) return True if palindrome, or false otherwise

Input: s = "eye"
Output: True

Input: s = "hello:
Output: False

ord() returns the number representing unicode code of char

# Time: linear time because you still iterate through the string O(n)
# Space: O(1) because not using any extra memory

def isPalindrome(s):
    new_string = ""
    
    for char in s:
        if char.isalnum():
            new_string += char.lower()
    return new_string == new_string[::-1]

print(isPalindrome("e1y1e"))

#----------------------------------------#


class Solution:
    def isPalindrome(self, s: str) -> bool:
        l, r = 0, len(s) - 1
        while l < r:
            while l < r and not self.alphanum(s[l]): 
                l += 1
            while l < r and not self.alphanum(s[r]): 
                r -= 1
            if s[l].lower() != s[r].lower(): 
                return False
            l += 1
            r -= 1
        return True
    
    # Could write own alpha-numeric function
    def alphanum(self, c):
        return (ord('A') <= ord(c) <= ord('Z') or
                ord('a') <= ord(c) <= ord('z') or
                ord('0') <= ord(c) <= ord('9'))
